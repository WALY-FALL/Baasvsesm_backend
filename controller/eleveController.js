import Eleve from "../models/elevemodel.js";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";

// G√©n√©rer un token JWT
const generateToken = (eleveId) => {
  return jwt.sign({ eleveId }, process.env.JWT_SECRET, { expiresIn: "24h" });
};


// ‚úÖ INSCRIPTION


// üîπ Fonction signupEleve
export const signupEleve = async (req, res) => {
  try {
    const { nom, prenom, email, password } = req.body;

    if (!nom || !prenom || !email || !password) {
      return res.status(400).json({
        success: false,
        message: "Tous les champs sont requis",
      });
    }

    // V√©rifier si l'email existe d√©j√†
    const existingEleve = await Eleve.findOne({ email });
    if (existingEleve) {
      return res.status(400).json({
        success: false,
        message: "Email d√©j√† utilis√©",
      });
    }

    // Hasher le mot de passe
    const hashedPassword = await bcrypt.hash(password, 10);

    // Cr√©er l'√©l√®ve
    const newEleve = await Eleve.create({
      nom,
      prenom,
      email,
      password: hashedPassword,
    });

    // G√©n√©rer le token JWT
    const token = jwt.sign(
      { id: newEleve._id, email: newEleve.email },
      process.env.JWT_SECRET,
      { expiresIn: "1d" }
    );

    // Retourner les donn√©es
    res.status(201).json({
      success: true,
      token,
      eleve: newEleve,
    });
  } catch (error) {
    console.error("Erreur signupEleve:", error);
    res.status(500).json({
      success: false,
      message: "Erreur serveur lors de l'inscription",
      error: error.message,
    });
  }
};


/*export const signupEleve = async (req, res) => {
  try {
    const { nom, prenom, email, password} = req.body;

    console.log("üì© Donn√©es re√ßues pour inscription √©l√®ve :", req.body);

    const existing = await Eleve.findOne({ email });
    if (existing) {
      return res.status(400).json({ success: false, message: "Email d√©j√† utilis√©" });
    }

    const hashedPassword = await bcrypt.hash(password, 10);

    const newEleve = new Eleve({
      nom,
      prenom,
      email,
      password: hashedPassword,
      //profId, // ‚úÖ on enregistre le prof li√© √† cet √©l√®ve
    });

    await newEleve.save();

    console.log("‚úÖ √âl√®ve cr√©√© avec profId :", newEleve.profId);

    res.status(201).json({
      success: true,
      message: "√âl√®ve cr√©√© avec succ√®s",
      eleve: newEleve,
    });
  } catch (error) {
    console.error("Erreur signupEleve:", error);
    res.status(500).json({ success: false, message: "Erreur serveur" });
  }
};*/

/*export const signupEleve = async (req, res) => {
  try {
    const { nom, prenom, email, password, profId } = req.body;

    // üîç Chercher l'√©l√®ve par email
    let eleve = await Eleve.findOne({ email }).populate("profId");;

    if (eleve) {
      // ‚úÖ L'√©l√®ve existe d√©j√† ‚Üí il a √©t√© ajout√© par un prof
      // On met √† jour son mot de passe et √©ventuellement son nom/pr√©nom
      const hashedPassword = await bcrypt.hash(password, 10);
      eleve.password = hashedPassword;
      eleve.nom = eleve.nom || nom;
      eleve.prenom = eleve.prenom || prenom;
      await eleve.save();

      const token = jwt.sign({ id: eleve._id }, process.env.JWT_SECRET, { expiresIn: "1d" });
      return res.status(200).json({
        success: true,
        message: "Mot de passe cr√©√© avec succ√®s. Vous pouvez maintenant vous connecter.",
        token,
        eleve
      });
    }

    // üöÄ Sinon, c‚Äôest un nouvel √©l√®ve ‚Üí on le cr√©e
    const hashedPassword = await bcrypt.hash(password, 10);
    const newEleve = new Eleve({ nom, prenom, email, password: hashedPassword, profId: req.user._id });
    await newEleve.save();

    const token = jwt.sign({ id: newEleve._id }, process.env.JWT_SECRET, { expiresIn: "1d" });
    return res.status(201).json({
      success: true,
      message: "Compte cr√©√© avec succ√®s",
      token,
      eleve: newEleve
    });

  } catch (err) {
    console.error("Erreur signupEleve:", err);
    return res.status(500).json({ success: false, message: "Erreur serveur" });
  }
};*/

/*export const signupEleve = async (req, res) => {
  try {
    const { nom, prenom, email, password } = req.body;
    console.log("üì© Requ√™te signup re√ßue :", req.body);

    // V√©rifie si l'√©l√®ve existe d√©j√† (cr√©√© par le prof)
    let eleve = await Eleve.findOne({ email });

    if (eleve) {
      console.log("‚ö†Ô∏è √âl√®ve d√©j√† existant :", eleve.email);
      // Si l‚Äô√©l√®ve existe d√©j√† mais sans mot de passe ‚Üí il compl√®te son profil
      if (!eleve.password) {
        const hashedPassword = await bcrypt.hash(password, 10);
        eleve.nom = eleve.nom || nom;
        eleve.prenom = eleve.prenom || prenom;
        eleve.password = hashedPassword;
        await eleve.save();
        return res.status(200).json({ success: true, message: "Compte compl√©t√© avec succ√®s !" });
      } else {
        // Sinon, il a d√©j√† un mot de passe ‚Üí il ne peut pas se r√©inscrire
        return res.status(400).json({ success: false, message: "Email d√©j√† utilis√©" });
      }
    }

    // Cas o√π l'√©l√®ve n‚Äôa jamais √©t√© cr√©√© par le prof
    const hashedPassword = await bcrypt.hash(password, 10);
    console.log("üÜï Cr√©ation d'un nouvel √©l√®ve :", email);
    const newEleve = new Eleve({ nom, prenom, email, password: hashedPassword });
    await newEleve.save();

    res.status(201).json({ success: true, message: "Inscription r√©ussie !" });
  } catch (error) {
    console.error("Erreur signupEleve:", error);
    res.status(500).json({ success: false, message: error.message });
  }
};*/
/*export const signup = async (req, res) => {
  try {
    const { nom, prenom, email, password } = req.body;

    // V√©rifier si l'√©l√®ve existe d√©j√†
    const existingEleve = await Eleve.findOne({ email });
    if (existingEleve) {
      return res.status(400).json({ success: false, message: "Email d√©j√† utilis√©" });
    }

    // Hasher le mot de passe
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);

    // Cr√©er l'√©l√®ve
    const newEleve = await Eleve.create({
      nom,
      prenom,
      email,
      password: hashedPassword,
    });

    res.status(201).json({
      success: true,
      message: "√âl√®ve cr√©√© avec succ√®s",
      eleve: {
        id: newEleve._id,
        nom: newEleve.nom,
        prenom: newEleve.prenom,
        email: newEleve.email,
      },
      token: generateToken(newEleve._id),
    });
  } catch (error) {
    console.error("Erreur signup:", error);
    res.status(500).json({ success: false, message: "Erreur serveur" });
  }
};*/

// ‚úÖ CONNEXION


export const loginEleve = async (req, res) => {
  try {
    const { email, password } = req.body;

    console.log("üì© Tentative de connexion de :", email);

    // üîç On r√©cup√®re l'√©l√®ve et on "populate" le prof
    const eleve = await Eleve.findOne({ email }).populate("profId");

    if (!eleve) {
      console.log("‚ùå √âl√®ve non trouv√©");
      return res.status(404).json({ success: false, message: "√âl√®ve non trouv√©" });
    }

    const isMatch = await bcrypt.compare(password, eleve.password);
    if (!isMatch) {
      console.log("‚ùå Mot de passe incorrect");
      return res.status(400).json({ success: false, message: "Mot de passe incorrect" });
    }

    const token = jwt.sign({ id: eleve._id }, process.env.JWT_SECRET, { expiresIn: "1d" });

    console.log("‚úÖ √âl√®ve connect√© :", eleve.email, "Prof :", eleve.profId);

    res.status(200).json({
      success: true,
      message: "Connexion r√©ussie",
      token,
      eleve: {
        _id: eleve._id,
        nom: eleve.nom,
        prenom: eleve.prenom,
        email: eleve.email,
        profId: eleve.profId?._id || eleve.profId, // ‚úÖ envoie bien l'id du prof
      },
    });
  } catch (error) {
    console.error("Erreur login √©l√®ve:", error);
    res.status(500).json({ success: false, message: "Erreur serveur" });
  }
};

// ‚ûï Ajouter un √©l√®ve
export const addEleve = async (req, res) => {
  try {
    const { nom, prenom, email, profId } = req.body;

  if (!nom || !prenom || !email || !profId) {

      return res.status(400).json({ message: "Tous les champs sont requis" });
    }

    const newEleve = new Eleve({
      nom,
      prenom,
      email,
      profId,
      
    });

    await newEleve.save();

    res.status(201).json(newEleve);
  } catch (error) {
    console.error("‚ùå Erreur lors de l‚Äôajout d‚Äôun √©l√®ve :", error);
    res.status(500).json({ message: "Erreur serveur lors de l‚Äôajout" });
  }
};

// üìã R√©cup√©rer tous les √©l√®ves d‚Äôun prof
export const getElevesByProf = async (req, res) => {
  try {
    const { profId } = req.params;
    const eleves = await Eleve.find({ profId });

    res.status(200).json(eleves);
  } catch (error) {
    console.error("‚ùå Erreur lors du chargement des √©l√®ves :", error);
    res.status(500).json({ message: "Erreur serveur lors du chargement" });
  }
};

